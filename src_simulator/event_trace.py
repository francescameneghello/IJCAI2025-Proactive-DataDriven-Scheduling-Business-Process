from datetime import datetime, timedelta
import simpy
import random
from process import SimulationProcess
from pm4py.objects.petri_net import semantics
from parameters import Parameters
from utility import Prefix
import numpy as np
import copy
import csv
from utility import Buffer, ParallelObject
from scipy.stats import truncnorm
import math



RES_TO_N = {'Unknown_10002004': 1, 'Unknown_10000652': 2, 'RESEARCH RN_10002337': 3, 'NP PA_10000144': 4, 'INF RN_10001838': 5, 'Unknown_10001389': 6, 'Unknown_10000726': 7, 'Unknown_10000296': 8, 'Unknown_10000085': 9, 'Unknown_10002893': 10, 'INF RN_10002187': 11, 'MD_10000635': 12, 'Unknown_10000687': 13, 'MD_10000096': 14, 'Unknown_10002830': 15, 'INF RN_10002606': 16, 'Unknown_10001912': 17, 'Unknown_10000882': 18, 'INF RN_10000396': 19, 'Unknown_10000845': 20, 'Unknown_10002045': 21, 'Unknown_10000341': 22, 'Unknown_10002143': 23, 'Unknown_10001422': 24, 'Unknown_10000025': 25, 'Unknown_10000161': 26, 'MD_10000151': 27, 'INF RN_10000452': 28, 'Unknown_10000495': 29, 'SOCIAL WORKER_10000327': 30, 'Unknown_10000650': 31, 'MD_10000562': 32, 'Unknown_10002878': 33, 'MD_10000568': 34, 'Unknown_10002115': 35, 'Unknown_10002221': 36, 'Unknown_10000834': 37, 'INF RN_10002519': 38, 'RESEARCH RN_10002968': 39, 'MD_10000134': 40, 'MD_10000576': 41, 'Unknown_10002345': 42, 'Unknown_10000287': 43, 'Unknown_10000325': 44, 'INF RN_10002769': 45, 'GENETIC COUNSELOR_10002908': 46, 'NP PA_10002170': 47, 'Unknown_10000875': 48, 'INF RN_10002265': 49, 'Unknown_10002952': 50, 'Unknown_10001713': 51, 'Unknown_10002378': 52, 'INTERPRETER_10001087': 53, 'IV NURSE_10000582': 54, 'MD_10000983': 55, 'Unknown_10002036': 56, 'INF RN_10002378': 57, 'MD_10000409': 58, 'Unknown_10000133': 59, 'MD_10001859': 60, 'Unknown_10000988': 61, 'MD_10000370': 62, 'MD_10001827': 63, 'NP PA_10000240': 64, 'Unknown_10002323': 65, 'Unknown_10001811': 66, 'Unknown_10002256': 67, 'MD_10000140': 68, 'PROGRAM RN_10000484': 69, 'Unknown_10000828': 70, 'Unknown_10000502': 71, 'Unknown_10000662': 72, 'MD_10001814': 73, 'Unknown_10002372': 74, 'MD_10001340': 75, 'INF RN_10002632': 76, 'Unknown_10000608': 77, 'INF RN_10000764': 78, 'Unknown_10003034': 79, 'Unknown_10002421': 80, 'NP PA_10002143': 81, 'MD_10002226': 82, 'INF RN_10001423': 83, 'MD_10000232': 84, 'INF RN_10000432': 85, 'Unknown_10000365': 86, 'RESEARCH RN_10000476': 87, 'Unknown_10002568': 88, 'INF RN_10000544': 89, 'INF RN_10001603': 90, 'Unknown_10001377': 91, 'Unknown_10002869': 92, 'Unknown_10000477': 93, 'FELLOW_10002878': 94, 'MD_10000569': 95, 'INF RN_10002400': 96, 'Unknown_10000409': 97, 'NP PA_10001513': 98, 'MD_10002201': 99, 'Unknown_10002399': 100, 'MD_10000017': 101, 'MD_10000421': 102, 'Unknown_10002218': 103, 'Unknown_10002302': 104, 'Unknown_10002332': 105, 'MD_10000374': 106, 'GENETIC COUNSELOR_10002036': 107, 'Unknown_10002434': 108, 'Unknown_10000926': 109, 'Unknown_10000820': 110, 'Unknown_10001949': 111, 'Unknown_10000746': 112, 'Unknown_10000370': 113, 'Unknown_10000633': 114, 'Unknown_10002023': 115, 'Unknown_10001058': 116, 'MD_10001524': 117, 'INF RN_10001008': 118, 'NP PA_10002117': 119, 'Unknown_10000836': 120, 'MD_10000225': 121, 'MD_10000512': 122, 'Unknown_10001534': 123, 'Unknown_10000686': 124, 'MD_10000070': 125, 'Unknown_10002039': 126, 'INF RN_10002927': 127, 'Unknown_10000230': 128, 'INF RN_10000274': 129, 'Unknown_10002560': 130, 'Unknown_10000526': 131, 'Unknown_10000096': 132, 'Unknown_10000634': 133, 'RESEARCH RN_10003027': 134, 'MD_10000461': 135, 'IV NURSE_10001300': 136, 'NP PA_10000263': 137, 'MD_10002603': 138, 'Unknown_10000869': 139, 'Unknown_10001922': 140, 'Unknown_10001507': 141, 'Unknown_10002077': 142, 'Unknown_10000063': 143, 'Unknown_10000692': 144, 'GENETIC COUNSELOR_10002749': 145, 'Unknown_10001839': 146, 'NP PA_10002374': 147, 'Unknown_10000742': 148, 'RESEARCH RN_10000230': 149, 'NP PA_10000403': 150, 'INF RN_10000023': 151, 'NP PA_10002369': 152, 'Unknown_10002089': 153, 'MD_10000331': 154, 'Unknown_10002215': 155, 'INF RN_10002514': 156, 'Unknown_10000675': 157, 'NP PA_10000943': 158, 'Unknown_10002071': 159, 'Unknown_10000231': 160, 'Unknown_10000549': 161, 'NP PA_10001831': 162, 'Unknown_10000467': 163, 'MD_10000927': 164, 'Unknown_10000958': 165, 'Unknown_10002543': 166, 'MD_10002023': 167, 'Unknown_10000269': 168, 'Unknown_10000809': 169, 'RESEARCH RN_10002158': 170, 'MD_10002219': 171, 'INF RN_10002045': 172, 'Unknown_10000405': 173, 'Unknown_10000148': 174, 'FELLOW_10001879': 175, 'INF RN_10001046': 176, 'FELLOW_10002347': 177, 'Unknown_10002337': 178, 'Unknown_10000181': 179, 'MD_10000932': 180, 'INF RN_10000333': 181, 'MD_10000968': 182, 'RESEARCH RN_10002204': 183, 'INF RN_10002494': 184, 'Unknown_10003057': 185, 'MD_10000335': 186, 'Unknown_10000637': 187, 'INF RN_10000831': 188, 'Unknown_10002236': 189, 'Unknown_10002569': 190, 'Unknown_10002502': 191, 'INF RN_10002953': 192, 'NP PA_10001946': 193, 'INTERPRETER_10000241': 194, 'Unknown_10002083': 195, 'Unknown_10001368': 196, 'Unknown_10002918': 197, 'Unknown_10001503': 198, 'Unknown_10002362': 199, 'NP PA_10000282': 200, 'Unknown_10002333': 201, 'INF RN_10002294': 202, 'Unknown_10000624': 203, 'MD_10001900': 204, 'INF RN_10000167': 205, 'NP PA_10000924': 206, 'Unknown_10001526': 207, 'Unknown_10002374': 208, 'Unknown_10000225': 209, 'Unknown_10001381': 210, 'INF RN_10001014': 211, 'RESEARCH RN_10002923': 212, 'PROGRAM RN_10001693': 213, 'Unknown_10000957': 214, 'Unknown_10002978': 215, 'MD_10001711': 216, 'MD_10001021': 217, 'PROGRAM RN_10000811': 218, 'NP PA_10000618': 219, 'INF RN_10000181': 220, 'Unknown_10000601': 221, 'MD_10000663': 222, 'MD_10002819': 223, 'INTERPRETER_10002896': 224, 'NP PA_10002857': 225, 'Unknown_10002154': 226, 'NP PA_10000279': 227, 'Unknown_10000709': 228, 'NP PA_10002302': 229, 'Unknown_10000803': 230, 'GENETIC COUNSELOR_10002638': 231, 'INF RN_10001623': 232, 'Unknown_10000288': 233, 'Unknown_10000062': 234, 'Unknown_10000024': 235, 'MD_10001965': 236, 'Unknown_10000357': 237, 'INTERPRETER_10002897': 238, 'Unknown_10000263': 239, 'Unknown_10002377': 240, 'NP PA_10000692': 241, 'INF RN_10002750': 242, 'Unknown_10001031': 243, 'Unknown_10003064': 244, 'Unknown_10000438': 245, 'MD_10000511': 246, 'INF RN_10002448': 247, 'NP PA_10002563': 248, 'PHLEBOTOMIST_10001664': 249, 'Unknown_10000568': 250, 'Unknown_10000838': 251, 'Unknown_10002819': 252, 'INF RN_10002333': 253, 'Unknown_10000979': 254, 'Unknown_10002204': 255, 'Unknown_10000384': 256, 'Unknown_10000253': 257, 'Unknown_10001005': 258, 'Unknown_10001472': 259, 'MD_10002067': 260, 'Unknown_10000071': 261, 'Unknown_10000124': 262, 'MD_10000329': 263, 'MD_10000062': 264, 'Unknown_10000981': 265, 'INF RN_10002439': 266, 'Unknown_10000825': 267, 'Unknown_10000927': 268, 'Unknown_10000977': 269, 'Unknown_10001028': 270, 'GENETIC COUNSELOR_10001488': 271, 'INF RN_10000092': 272, 'Unknown_10001504': 273, 'FELLOW_10002049': 274, 'Unknown_10002897': 275, 'Unknown_10003011': 276, 'INF RN_10000130': 277, 'INF RN_10000289': 278, 'Unknown_10000808': 279, 'Unknown_10000000': 280, 'IV NURSE_10000970': 281, 'Unknown_10002100': 282, 'RESEARCH RN_10001914': 283, 'MD_10000007': 284, 'Unknown_10002541': 285, 'MD_10000837': 286, 'SOCIAL WORKER_10000561': 287, 'Unknown_10000731': 288, 'RESEARCH RN_10000988': 289, 'Unknown_10000331': 290, 'Unknown_10001831': 291, 'Unknown_10000362': 292, 'INF RN_10002591': 293, 'Unknown_10002454': 294, 'Unknown_10001442': 295, 'Unknown_10002471': 296, 'INF RN_10000253': 297, 'NP PA_10001006': 298, 'INF RN_10000631': 299, 'NP PA_10001403': 300, 'NP PA_10000439': 301, 'MD_10000555': 302, 'NP PA_10002421': 303, 'RESEARCH RN_10001131': 304, 'Unknown_10002187': 305, 'Unknown_10000488': 306, 'Unknown_10003019': 307, 'MD_10000690': 308, 'NP PA_10002250': 309, 'Unknown_10000544': 310, 'Unknown_10000282': 311, 'INTERPRETER_10001439': 312, 'Unknown_10000436': 313, 'MD_10000701': 314, 'FELLOW_10002361': 315, 'NP PA_10001812': 316, 'Unknown_10002295': 317, 'RESEARCH RN_10003026': 318, 'NP PA_10002663': 319, 'Unknown_10002344': 320, 'Unknown_10000535': 321, 'Unknown_10000140': 322, 'Unknown_10000215': 323, 'Unknown_10002904': 324, 'Unknown_10002771': 325, 'Unknown_10000587': 326, 'MD_10001081': 327, 'Unknown_10001759': 328, 'Unknown_10001778': 329, 'FELLOW_10002360': 330, 'Unknown_10002532': 331, 'Unknown_10001204': 332, 'Unknown_10000441': 333, 'Unknown_10000126': 334, 'Unknown_10002607': 335, 'INF RN_10002452': 336, 'Unknown_10000991': 337, 'Unknown_10000400': 338, 'Unknown_10002318': 339, 'Unknown_10000232': 340, 'Unknown_10001006': 341, 'Unknown_10000482': 342, 'PHLEBOTOMIST_10001470': 343, 'Unknown_10000211': 344, 'INF RN_10003007': 345, 'INF RN_10001054': 346, 'INF RN_10002541': 347, 'INF RN_10002617': 348, 'Unknown_10000894': 349, 'Unknown_10002452': 350, 'Unknown_10001030': 351, 'Unknown_10000891': 352, 'Unknown_10000182': 353, 'Unknown_10000421': 354, 'MD_10002604': 355, 'INF RN_10002399': 356, 'Unknown_10002506': 357, 'OTHER STAFF_10002962': 358, 'Unknown_10002527': 359, 'NP PA_10002880': 360, 'Unknown_10000241': 361, 'Unknown_10002479': 362, 'MD_10000682': 363, 'Unknown_10000690': 364, 'Unknown_10002951': 365, 'Unknown_10000415': 366, 'Unknown_10000718': 367, 'MD_10001701': 368, 'Unknown_10001589': 369, 'GENETIC COUNSELOR_10001137': 370, 'Unknown_10002876': 371, 'NP PA_10000866': 372, 'Unknown_10000196': 373, 'INF RN_10002618': 374, 'INF RN_10000074': 375, 'Unknown_10000227': 376, 'Unknown_10000717': 377, 'Unknown_10001059': 378, 'Unknown_10001836': 379, 'RESEARCH RN_10001908': 380, 'Unknown_10000744': 381, 'MD_10002479': 382, 'INF RN_10000463': 383, 'Unknown_10000109': 384, 'Unknown_10002104': 385, 'Unknown_10000443': 386, 'RESEARCH RN_10001047': 387, 'Unknown_10002288': 388, 'Unknown_10000429': 389, 'Unknown_10000856': 390, 'OTHER STAFF_10002283': 391, 'INF RN_10002892': 392, 'Unknown_10000157': 393, 'NP PA_10001538': 394, 'INF RN_10003042': 395, 'Unknown_10000581': 396, 'Unknown_10001482': 397, 'Unknown_10000294': 398, 'Unknown_10001465': 399, 'Unknown_10000414': 400, 'MD_10002430': 401, 'INF RN_10002213': 402, 'RESEARCH RN_10000046': 403, 'IV NURSE_10000671': 404, 'Unknown_10000983': 405, 'INTERPRETER_10001334': 406, 'NP PA_10000543': 407, 'MD_10000903': 408, 'Unknown_10000992': 409, 'MD_10000836': 410, 'Unknown_10001891': 411, 'Unknown_10000924': 412, 'INF RN_10002560': 413, 'MD_10001080': 414, 'Unknown_10001089': 415, 'Unknown_10000104': 416, 'MD_10001949': 417, 'Unknown_10001544': 418, 'Unknown_10002822': 419, 'Unknown_10002319': 420, 'IV NURSE_10000404': 421, 'NP PA_10000089': 422, 'Unknown_10001047': 423, 'Unknown_10000784': 424, 'MD_10000150': 425, 'IV NURSE_10000266': 426, 'MD_10001534': 427, 'Unknown_10001318': 428, 'RESEARCH RN_10001522': 429, 'Unknown_10000614': 430, 'MD_10000082': 431, 'Unknown_10000452': 432, 'Unknown_10001545': 433, 'Unknown_10002615': 434, 'Unknown_10001743': 435, 'RESEARCH RN_10002045': 436, 'Unknown_10001404': 437, 'INF RN_10002569': 438, 'MD_10000178': 439, 'INF RN_10001540': 440, 'Unknown_10001633': 441, 'Unknown_10002127': 442, 'INF RN_10000397': 443, 'Unknown_10000576': 444, 'Unknown_10000313': 445, 'NP PA_10001979': 446, 'Unknown_10000340': 447, 'Unknown_10002554': 448, 'MD_10000110': 449, 'INTERPRETER_10001940': 450, 'MD_10002394': 451, 'INF RN_10000084': 452, 'Unknown_10000233': 453, 'Unknown_10000764': 454, 'Unknown_10000424': 455, 'INF RN_10002996': 456, 'PHLEBOTOMIST_10002447': 457, 'Unknown_10000515': 458, 'Unknown_10000213': 459, 'Unknown_10001064': 460, 'SOCIAL WORKER_10002888': 461, 'Unknown_10001109': 462, 'INTERPRETER_10001064': 463, 'IV NURSE_10002446': 464, 'MD_10000256': 465, 'Unknown_10000023': 466, 'Unknown_10000724': 467, 'Unknown_10001529': 468, 'Unknown_10000729': 469, 'FELLOW_10002862': 470, 'Unknown_10000655': 471, 'MD_10001712': 472, 'FELLOW_10002100': 473, 'MD_10000695': 474, 'Unknown_10000804': 475, 'MD_10001720': 476, 'INF RN_10001589': 477, 'RESEARCH RN_10000856': 478, 'Unknown_10002810': 479, 'NP PA_10000672': 480, 'Unknown_10000009': 481, 'Unknown_10000850': 482, 'Unknown_10000530': 483, 'Unknown_10000612': 484, 'INF RN_10001811': 485, 'Unknown_10002526': 486, 'Unknown_10000290': 487, 'GENETIC COUNSELOR_10002949': 488, 'Unknown_10000244': 489, 'MD_10000148': 490, 'Unknown_10000696': 491, 'MD_10001010': 492, 'Unknown_10001838': 493, 'INF RN_10001749': 494, 'MD_10002402': 495, 'RESEARCH RN_10002403': 496, 'NP PA_10001502': 497, 'Unknown_10001711': 498, 'MD_10002376': 499, 'Unknown_10002870': 500, 'MD_10002899': 501, 'Unknown_10000665': 502, 'Unknown_10001685': 503, 'MD_10001813': 504, 'Unknown_10000653': 505, 'Unknown_10002592': 506, 'MD_10000781': 507, 'MD_10000621': 508, 'Unknown_10000837': 509, 'Unknown_10000281': 510, 'Unknown_10001635': 511, 'PROGRAM RN_10002805': 512, 'Unknown_10002303': 513, 'FELLOW_10003057': 514, 'Unknown_10000419': 515, 'Unknown_10000265': 516, 'Unknown_10000408': 517, 'NP PA_10001000': 518, 'Unknown_10001086': 519, 'Unknown_10001501': 520, 'Unknown_10002649': 521, 'Unknown_10000672': 522, 'MD_10000904': 523, 'IV NURSE_10002517': 524, 'INF RN_10002994': 525, 'Unknown_10002190': 526, 'Unknown_10000404': 527, 'Unknown_10001022': 528, 'Unknown_10002090': 529, 'Unknown_10000372': 530, 'Unknown_10002494': 531, 'MD_10000627': 532, 'MD_10000564': 533, 'Unknown_10002432': 534, 'MD_10000624': 535, 'Unknown_10000481': 536, 'IV NURSE_10000670': 537, 'Unknown_10001083': 538, 'MD_10000991': 539, 'INF RN_10000869': 540, 'Unknown_10000051': 541, 'Unknown_10000522': 542, 'RESEARCH RN_10002893': 543, 'INF RN_10001043': 544, 'Unknown_10002411': 545, 'INF RN_10000877': 546, 'INF RN_10003017': 547, 'INF RN_10000227': 548, 'Unknown_10002439': 549, 'Unknown_10001439': 550, 'RESEARCH RN_10002269': 551, 'Unknown_10001666': 552, 'MD_10000238': 553, 'Unknown_10000688': 554, 'INF RN_10001633': 555, 'PHLEBOTOMIST_10000034': 556, 'Unknown_10002749': 557, 'Unknown_10000319': 558, 'INF RN_10000250': 559, 'Unknown_10000258': 560, 'Unknown_10000816': 561, 'FELLOW_10002866': 562, 'IV NURSE_10000820': 563, 'Unknown_10000411': 564, 'IV NURSE_10002436': 565, 'MD_10000975': 566, 'INTERPRETER_10002828': 567, 'INF RN_10001394': 568, 'Unknown_10002582': 569, 'MD_10000334': 570, 'PROGRAM RN_10000676': 571, 'Unknown_10002392': 572, 'SOCIAL WORKER_10002904': 573, 'MD_10001599': 574, 'INF RN_10002172': 575, 'SOCIAL WORKER_10001865': 576, 'FELLOW_10001116': 577, 'IV NURSE_10002527': 578, 'INF RN_10001058': 579, 'Unknown_10000238': 580, 'Unknown_10000697': 581, 'RESEARCH RN_10000287': 582, 'INF RN_10001011': 583, 'Unknown_10002126': 584, 'Unknown_10002638': 585, 'Unknown_10000410': 586, 'FELLOW_10002847': 587, 'Unknown_10000377': 588, 'MD_10000963': 589, 'Unknown_10000788': 590, 'Unknown_10000507': 591, 'RESEARCH RN_10000330': 592, 'Unknown_10000904': 593, 'Unknown_10002376': 594, 'Unknown_10000335': 595, 'MD_10002395': 596, 'Unknown_10000076': 597, 'Unknown_10002356': 598, 'IV NURSE_10002509': 599, 'Unknown_10002577': 600, 'Unknown_10000914': 601, 'Unknown_10001043': 602, 'Unknown_10002400': 603, 'Unknown_10002598': 604, 'Unknown_10002402': 605, 'Unknown_10002640': 606, 'Unknown_10000440': 607, 'INTERPRETER_10001067': 608, 'NP PA_10001848': 609, 'Unknown_10000639': 610, 'Unknown_10000221': 611, 'Unknown_10001936': 612, 'MD_10001542': 613, 'Unknown_10002296': 614, 'MD_10000408': 615, 'Unknown_10000903': 616, 'Unknown_10000349': 617, 'MD_10001503': 618, 'NP PA_10001651': 619, 'Unknown_10000877': 620, 'Unknown': 621, 'RESEARCH RN_10000252': 622, 'OTHER STAFF_10002905': 623, 'Unknown_10001934': 624, 'Unknown_10000472': 625, 'Unknown_10000342': 626, 'Unknown_10001814': 627, 'Unknown_10001627': 628, 'Unknown_10000663': 629, 'RESEARCH RN_10001109': 630, 'Unknown_10000279': 631, 'INF RN_10001020': 632, 'Unknown_10001782': 633, 'FELLOW_10000702': 634, 'Unknown_10002588': 635, 'Unknown_10002533': 636, 'MD_10001560': 637, 'INF RN_10000231': 638, 'INF RN_10000425': 639, 'FELLOW_10002363': 640, 'MD_10000660': 641, 'Unknown_10003075': 642, 'Unknown_10000757': 643, 'MD_10000016': 644, 'Unknown_10000511': 645, 'NP PA_10000788': 646, 'Unknown_10001533': 647, 'RESEARCH RN_10000265': 648, 'MD_10000725': 649, 'Unknown_10001088': 650, 'Unknown_10002906': 651, 'GENETIC COUNSELOR_10000428': 652, 'MD_10002089': 653, 'Unknown_10002619': 654, 'Unknown_10002828': 655, 'INF RN_10000354': 656, 'MD_10000372': 657, 'MD_10000009': 658, 'Unknown_10001426': 659, 'Unknown_10000752': 660, 'Unknown_10002521': 661, 'MD_10002935': 662, 'MD_10000510': 663, 'Unknown_10000039': 664, 'Unknown_10000874': 665, 'Unknown_10002996': 666, 'Unknown_10000250': 667, 'Unknown_10002493': 668, 'MD_10002081': 669, 'Unknown_10000075': 670, 'Unknown_10001067': 671, 'INF RN_10000793': 672, 'Unknown_10002357': 673, 'GENETIC COUNSELOR_10002027': 674, 'Unknown_10001488': 675, 'Unknown_10002347': 676, 'Unknown_10001486': 677, 'INTERPRETER_10001063': 678, 'NP PA_10000949': 679, 'Unknown_10000563': 680, 'Unknown_10002606': 681, 'MD_10000610': 682, 'INF RN_10002053': 683, 'Unknown_10001943': 684, 'Unknown_10002130': 685, 'MD_10000063': 686, 'GENETIC COUNSELOR_10002713': 687, 'Unknown_10000630': 688, 'INF RN_10000504': 689, 'RESEARCH RN_10000747': 690, 'IV NURSE_10000405': 691, 'Unknown_10001470': 692, 'INF RN_10000427': 693, 'INF RN_10002039': 694, 'Unknown_10000671': 695, 'MD_10000219': 696, 'Unknown_10001651': 697, 'NP PA_10000356': 698, 'MD_10001069': 699, 'INF RN_10002372': 700, 'Unknown_10000623': 701, 'MD_10000825': 702, 'Unknown_10000018': 703, 'Unknown_10001512': 704, 'Unknown_10002591': 705, 'INF RN_10002405': 706, 'Unknown_10001637': 707, 'Unknown_10000476': 708, 'Unknown_10000333': 709, 'MD_10000957': 710, 'INF RN_10000847': 711, 'Unknown_10002539': 712, 'Unknown_10003038': 713, 'Unknown_10000219': 714, 'Unknown_10001590': 715, 'Unknown_10003056': 716, 'Unknown_10000162': 717, 'Unknown_10000186': 718, 'Unknown_10000074': 719, 'IV NURSE_10000639': 720, 'Unknown_10000559': 721, 'MD_10000834': 722, 'PROGRAM RN_10000728': 723, 'Unknown_10000811': 724, 'MD_10000527': 725, 'MD_10000659': 726, 'Unknown_10001434': 727, 'Unknown_10001749': 728, 'Unknown_10000422': 729, 'MD_10000147': 730, 'Unknown_10000896': 731, 'NP PA_10000926': 732, 'IV NURSE_10002471': 733, 'MD_10002161': 734, 'Unknown_10002769': 735, 'NP PA_10000438': 736, 'INF RN_10002334': 737, 'MD_10000269': 738, 'Unknown_10002586': 739, 'MD_10002500': 740, 'IV NURSE_10001922': 741, 'Unknown_10002866': 742, 'PROGRAM RN_10002615': 743, 'Unknown_10002170': 744, 'MD_10000085': 745, 'INF RN_10001666': 746, 'Unknown_10000174': 747, 'Unknown_10000403': 748, 'INF RN_10000718': 749, 'MD_10000633': 750, 'MD_10000051': 751, 'Unknown_10001914': 752, 'Unknown_10000059': 753, 'Unknown_10000975': 754, 'INF RN_10000365': 755, 'Unknown_10000303': 756, 'Unknown_10001093': 757, 'Unknown_10001926': 758, 'Unknown_10000514': 759, 'Unknown_10002052': 760, 'INF RN_10001653': 761, 'Unknown_10000246': 762, 'MD_10000931': 763, 'MD_10000910': 764, 'Unknown_10002206': 765, 'MD_10000606': 766, 'MD_10000283': 767, 'FELLOW_10003011': 768, 'Unknown_10000105': 769, 'Unknown_10000847': 770, 'MD_10000803': 771, 'MD_10000657': 772, 'MD_10002983': 773, 'INF RN_10001370': 774, 'Unknown_10002594': 775, 'Unknown_10000330': 776, 'Unknown_10001584': 777, 'Unknown_10001462': 778, 'Unknown_10001875': 779, 'Unknown_10002113': 780, 'INF RN_10001131': 781, 'NP PA_10000549': 782, 'Unknown_10000366': 783, 'PHLEBOTOMIST_10002307': 784, 'Unknown_10002369': 785, 'Unknown_10003042': 786, 'RESEARCH RN_10002778': 787, 'INTERPRETER_10001316': 788, 'MD_10000535': 789, 'Unknown_10001366': 790, 'Unknown_10000627': 791, 'PHLEBOTOMIST_10002521': 792, 'NP PA_10000186': 793, 'Unknown_10002387': 794, 'INF RN_10000874': 795, 'Unknown_10000867': 796, 'RESEARCH RN_10002515': 797, 'NP PA_10000126': 798, 'Unknown_10002087': 799, 'Unknown_10002509': 800, 'Unknown_10002632': 801, 'Unknown_10000252': 802, 'IV NURSE_10001743': 803, 'Unknown_10001716': 804, 'INF RN_10000314': 805, 'INF RN_10001042': 806, 'RESEARCH RN_10001022': 807, 'FELLOW_10002344': 808, 'RESEARCH RN_10000891': 809, 'Unknown_10000072': 810, 'INF RN_10002918': 811, 'Unknown_10001956': 812, 'NP PA_10000658': 813, 'Unknown_10001021': 814, 'Unknown_10000251': 815, 'Unknown_10002847': 816, 'IV NURSE_10002435': 817, 'MD_10000744': 818, 'Unknown_10001636': 819, 'MD_10000233': 820, 'Unknown_10000165': 821, 'INF RN_10002554': 822, 'MD_10000845': 823, 'Unknown_10002361': 824, 'Unknown_10001361': 825, 'Unknown_10001771': 826, 'INF RN_10000816': 827, 'MD_10000420': 828, 'MD_10000109': 829, 'RESEARCH RN_10001934': 830, 'FELLOW_10001713': 831, 'FELLOW_10002359': 832, 'PROGRAM RN_10002534': 833, 'Unknown_10001812': 834, 'IV NURSE_10000587': 835, 'FELLOW_10002357': 836, 'MD_10000229': 837, 'FELLOW_10002343': 838, 'Unknown_10000543': 839, 'Unknown_10000073': 840, 'INF RN_10002493': 841, 'Unknown_10001900': 842, 'INF RN_10002577': 843, 'INF RN_10002432': 844, 'Unknown_10001845': 845, 'INF RN_10000382': 846, 'Unknown_10000510': 847, 'Unknown_10002859': 848, 'Unknown_10000810': 849, 'INF RN_10000752': 850, 'MD_10001521': 851, 'MD_10000688': 852, 'Unknown_10002433': 853, 'Unknown_10002961': 854, 'Unknown_10001484': 855, 'MD_10000473': 856, 'Unknown_10002081': 857, 'RESEARCH RN_10002041': 858, 'NP PA_10002619': 859, 'INF RN_10000174': 860, 'RESEARCH RN_10001627': 861, 'Unknown_10000577': 862, 'INF RN_10000133': 863, 'INF RN_10002594': 864, 'RESEARCH RN_10000024': 865, 'Unknown_10000430': 866, 'MD_10000875': 867, 'Unknown_10000743': 868, 'RESEARCH RN_10001840': 869, 'Unknown_10002334': 870, 'Unknown_10002037': 871, 'INF RN_10001646': 872, 'RESEARCH RN_10002332': 873, 'Unknown_10000351': 874, 'Unknown_10000527': 875, 'Unknown_10003052': 876, 'Unknown_10002448': 877, 'Unknown_10000498': 878, 'Unknown_10002829': 879, 'Unknown_10001540': 880, 'Unknown_10003053': 881, 'MD_10000696': 882, 'MD_10000515': 883, 'NP PA_10001647': 884, 'GENETIC COUNSELOR_10000896': 885, 'INTERPRETER_10001096': 886, 'NP PA_10000025': 887, 'INTERPRETER_10001540': 888, 'Unknown_10000473': 889, 'MD_10002607': 890, 'Unknown_10001908': 891, 'IV NURSE_10000717': 892, 'PROGRAM RN_10002215': 893, 'IV NURSE_10000286': 894, 'Unknown_10000322': 895, 'MD_10000422': 896, 'Unknown_10000380': 897, 'Unknown_10000747': 898, 'Unknown_10000725': 899, 'MD_10000072': 900, 'Unknown_10001065': 901, 'Unknown_10001530': 902, 'Unknown_10001538': 903, 'INF RN_10003046': 904, 'Unknown_10001568': 905, 'Unknown_10002552': 906, 'Unknown_10001081': 907, 'Unknown_10002008': 908, 'MD_10000530': 909, 'MD_10002864': 910, 'Unknown_10002181': 911, 'Unknown_10000456': 912, 'MD_10000487': 913, 'INTERPRETER_10001486': 914, 'Unknown_10002418': 915, 'Unknown_10000932': 916, 'Unknown_10000257': 917, 'INF RN_10000302': 918, 'Unknown_10000458': 919, 'MD_10000061': 920, 'Unknown_10000748': 921, 'Unknown_10000947': 922, 'Unknown_10002291': 923, 'NP PA_10000350': 924, 'Unknown_10001570': 925, 'NP PA_10000185': 926, 'Unknown_10001245': 927, 'NP PA_10002843': 928, 'Unknown_10001316': 929, 'GENETIC COUNSELOR_10001487': 930, 'Unknown_10001122': 931, 'NP PA_10002961': 932, 'MD_10001028': 933, 'PHLEBOTOMIST_10002532': 934, 'Unknown_10000418': 935, 'Unknown_10002091': 936, 'MD_10000947': 937, 'INF RN_10002077': 938, 'INF RN_10000375': 939, 'IV NURSE_10001802': 940, 'Unknown_10000908': 941, 'IV NURSE_10000093': 942, 'Unknown_10001518': 943, 'RESEARCH RN_10003014': 944, 'Unknown_10000842': 945, 'Unknown_10000273': 946, 'Unknown_10002557': 947, 'Unknown_10000822': 948, 'MD_10000559': 949, 'Unknown_10001116': 950, 'Unknown_10003033': 951, 'MD_10002692': 952, 'Unknown_10001163': 953, 'INF RN_10001943': 954, 'Unknown_10000235': 955, 'FELLOW_10003034': 956, 'Unknown_10000048': 957, 'MD_10000563': 958, 'Unknown_10000439': 959, 'NP PA_10000573': 960, 'Unknown_10001131': 961, 'INF RN_10000882': 962, 'Unknown_10000928': 963, 'MD_10001484': 964, 'Unknown_10002283': 965, 'FELLOW_10002348': 966, 'Unknown_10000461': 967, 'MD_10002568': 968, 'Unknown_10000110': 969, 'Unknown_10001688': 970, 'Unknown_10001069': 971, 'Unknown_10000925': 972, 'Unknown_10002128': 973, 'INF RN_10000171': 974, 'Unknown_10000635': 975, 'MD_10000210': 976, 'IV NURSE_10001783': 977, 'Unknown_10000307': 978, 'INF RN_10000189': 979, 'INF RN_10002456': 980, 'Unknown_10002317': 981, 'Unknown_10000670': 982, 'Unknown_10003076': 983, 'MD_10000675': 984, 'Unknown_10000702': 985, 'INF RN_10002588': 986, 'Unknown_10000632': 987, 'MD_10000453': 988, 'NP PA_10002256': 989, 'Unknown_10000332': 990, 'Unknown_10002517': 991, 'Unknown_10002428': 992, 'INF RN_10002485': 993, 'IV NURSE_10000467': 994, 'INF RN_10003047': 995, 'RESEARCH RN_10002087': 996, 'NP PA_10002020': 997, 'INF RN_10000459': 998, 'Unknown_10002617': 999, 'Unknown_10000972': 1000, 'MD_10002597': 1001, 'Unknown_10002542': 1002, 'MD_10002037': 1003, 'INF RN_10002830': 1004, 'Unknown_10002604': 1005, 'NP PA_10001708': 1006, 'MD_10000434': 1007, 'MD_10000059': 1008, 'Unknown_10002896': 1009, 'INF RN_10000384': 1010, 'Unknown_10000459': 1011, 'NP PA_10000469': 1012, 'MD_10001719': 1013, 'Unknown_10000580': 1014, 'INF RN_10002052': 1015, 'Unknown_10002117': 1016, 'MD_10002401': 1017, 'Unknown_10000134': 1018, 'NP PA_10000194': 1019, 'PHARM_10002533': 1020, 'Unknown_10000676': 1021, 'INF RN_10000481': 1022, 'Unknown_10001015': 1023, 'Unknown_10000297': 1024, 'Unknown_10000046': 1025, 'FELLOW_10000757': 1026, 'INF RN_10002126': 1027, 'MD_10000655': 1028, 'Unknown_10000089': 1029, 'Unknown_10001657': 1030, 'Unknown_10002663': 1031, 'NP PA_10002291': 1032, 'INF RN_10002586': 1033, 'PROGRAM RN_10002317': 1034, 'MD_10001031': 1035, 'MD_10002078': 1036, 'INF RN_10000075': 1037, 'Unknown_10002403': 1038, 'FELLOW_10002358': 1039, 'Unknown_10001379': 1040, 'Unknown_10000555': 1041, 'RESEARCH RN_10002951': 1042, 'Unknown_10001701': 1043, 'INF RN_10000237': 1044, 'Unknown_10002500': 1045, 'Unknown_10002861': 1046, 'Unknown_10002583': 1047, 'INF RN_10002506': 1048, 'Unknown_10001879': 1049, 'Unknown_10000237': 1050, 'INF RN_10000410': 1051, 'NP PA_10000376': 1052, 'MD_10001512': 1053, 'FELLOW_10002345': 1054, 'INF RN_10001530': 1055, 'NP PA_10000881': 1056, 'MD_10001413': 1057, 'MD_10000838': 1058, 'INF RN_10002453': 1059, 'NP PA_10000591': 1060, 'Unknown_10001615': 1061, 'INF RN_10000828': 1062, 'MD_10000276': 1063, 'NP PA_10000842': 1064, 'NP PA_10000215': 1065, 'Unknown_10000949': 1066, 'Unknown_10000562': 1067, 'MD_10000847': 1068, 'INF RN_10001918': 1069, 'Unknown_10002862': 1070, 'Unknown_10002489': 1071, 'Unknown_10002299': 1072, 'MD_10000339': 1073, 'Unknown_10000190': 1074, 'MD_10000418': 1075, 'RESEARCH RN_10001366': 1076, 'NP PA_10000343': 1077, 'Unknown_10000504': 1078, 'MD_10000987': 1079, 'FELLOW_10001519': 1080, 'MD_10000146': 1081, 'NP PA_10000076': 1082, 'Unknown_10001413': 1083, 'Unknown_10002395': 1084, 'RN_10002585': 1085, 'MD_10002282': 1086, 'MD_10002220': 1087, 'Unknown_10002129': 1088, 'NP PA_10000251': 1089, 'IV NURSE_10001120': 1090, 'MD_10000565': 1091, 'MD_10000055': 1092, 'NP PA_10001826': 1093, 'Unknown_10002857': 1094, 'RESEARCH RN_10002973': 1095, 'Unknown_10001010': 1096, 'MD_10000190': 1097, 'MD_10001629': 1098, 'Unknown_10001799': 1099, 'INF RN_10002649': 1100, 'Unknown_10001649': 1101, 'MD_10000338': 1102, 'GENETIC COUNSELOR_10002732': 1103, 'NP PA_10000844': 1104, 'Unknown_10001946': 1105, 'IV NURSE_10000258': 1106, 'Unknown_10000879': 1107, 'Unknown_10002360': 1108, 'MD_10000345': 1109, 'Unknown_10001708': 1110, 'Unknown_10000103': 1111, 'NP PA_10002392': 1112, 'Unknown_10000668': 1113, 'Unknown_10002213': 1114, 'Unknown_10000943': 1115, 'Unknown_10000272': 1116, 'Unknown_10000606': 1117, 'Unknown_10001063': 1118, 'MD_10000514': 1119, 'Unknown_10002435': 1120, 'Unknown_10000382': 1121, 'Unknown_10002041': 1122, 'Unknown_10000040': 1123, 'Unknown_10000147': 1124, 'MD_10000165': 1125, 'MD_10000521': 1126, 'SOCIAL WORKER_10000681': 1127, 'PHLEBOTOMIST_10002526': 1128, 'NP PA_10000992': 1129, 'Unknown_10001718': 1130, 'Unknown_10002250': 1131, 'Unknown_10003007': 1132, 'INF RN_10000508': 1133, 'Unknown_10002038': 1134, 'INF RN_10002598': 1135, 'Unknown_10000038': 1136, 'Unknown_10000890': 1137, 'Unknown_10002449': 1138, 'NP PA_10000687': 1139, 'Unknown_10002220': 1140, 'NP PA_10002605': 1141, 'Unknown_10000070': 1142, 'Unknown_10002248': 1143, 'Unknown_10000323': 1144, 'MD_10001601': 1145, 'NP PA_10002248': 1146, 'INF RN_10000808': 1147, 'Unknown_10000468': 1148, 'MD_10000124': 1149, 'MD_10002502': 1150, 'Unknown_10002446': 1151, 'MD_10001727': 1152, 'RESEARCH RN_10000169': 1153, 'MD_10000972': 1154, 'Unknown_10001000': 1155, 'Unknown_10000286': 1156, 'MD_10000307': 1157, 'INF RN_10000697': 1158, 'Unknown_10000658': 1159, 'Unknown_10000189': 1160, 'MD_10000423': 1161, 'MD_10000451': 1162, 'Unknown_10000130': 1163, 'Unknown_10000556': 1164, 'Unknown_10001416': 1165, 'Unknown_10001087': 1166, 'INF RN_10000018': 1167, 'Unknown_10000338': 1168, 'NP PA_10000495': 1169, 'INF RN_10000429': 1170, 'Unknown_10000463': 1171, 'Unknown_10001007': 1172, 'MD_10002978': 1173, 'Unknown_10002534': 1174, 'Unknown_10001691': 1175, 'NP PA_10000852': 1176, 'INF RN_10002570': 1177, 'MD_10000039': 1178, 'INF RN_10000182': 1179, 'MD_10000748': 1180, 'Unknown_10001601': 1181, 'INF RN_10003019': 1182, 'IV NURSE_10001163': 1183, 'Unknown_10000508': 1184, 'Unknown_10000034': 1185, 'INF RN_10002525': 1186, 'MD_10002542': 1187, 'Unknown_10001827': 1188, 'Unknown_10001033': 1189, 'FELLOW_10002362': 1190, 'Unknown_10001313': 1191, 'MD_10001245': 1192, 'INF RN_10000380': 1193, 'Unknown_10000583': 1194, 'Unknown_10002464': 1195, 'Unknown_10002161': 1196, 'MD_10000630': 1197, 'PHLEBOTOMIST_10002296': 1198, 'Unknown_10001642': 1199, 'Unknown_10000798': 1200, 'MD_10000724': 1201, 'Unknown_10001993': 1202, 'RESEARCH RN_10000798': 1203, 'Unknown_10002949': 1204, 'IV NURSE_10000378': 1205, 'INF RN_10002539': 1206, 'MD_10000665': 1207, 'Unknown_10000359': 1208, 'RESEARCH RN_10000354': 1209, 'Unknown_10001423': 1210, 'MD_10000480': 1211, 'Unknown_10002096': 1212, 'Unknown_10000561': 1213, 'Unknown_10002405': 1214, 'Unknown_10002833': 1215, 'Unknown_10000557': 1216, 'MD_10000979': 1217, 'INTERPRETER_10001088': 1218, 'Unknown_10000569': 1219, 'Unknown_10001542': 1220, 'Unknown_10002618': 1221, 'IV NURSE_10002303': 1222, 'Unknown_10001848': 1223, 'PHLEBOTOMIST_10003002': 1224, 'INF RN_10000085': 1225, 'MD_10003031': 1226, 'INF RN_10000652': 1227, 'MD_10001566': 1228, 'MD_10000592': 1229, 'MD_10000310': 1230, 'Unknown_10002049': 1231, 'MD_10001482': 1232, 'Unknown_10002027': 1233, 'Unknown_10002294': 1234, 'RESEARCH RN_10000774': 1235, 'Unknown_10001965': 1236, 'INF RN_10000457': 1237, 'MD_10002602': 1238, 'Unknown_10002430': 1239, 'Unknown_10000689': 1240, 'MD_10000743': 1241, 'RESEARCH RN_10001936': 1242, 'GENETIC COUNSELOR_10000100': 1243, 'INF RN_10002236': 1244, 'Unknown_10001014': 1245, 'Unknown_10001394': 1246, 'Unknown_10000968': 1247, 'MD_10002947': 1248, 'FELLOW_10002356': 1249, 'Unknown_10000621': 1250, 'INTERPRETER_10001122': 1251, 'MD_10000492': 1252, 'Unknown_10002485': 1253, 'INF RN_10001404': 1254, 'NP PA_10001007': 1255, 'INF RN_10001426': 1256, 'RESEARCH RN_10002418': 1257, 'Unknown_10001712': 1258, 'Unknown_10000852': 1259, 'MD_10002411': 1260, 'Unknown_10001603': 1261, 'Unknown_10002536': 1262, 'MD_10000257': 1263, 'Unknown_10000721': 1264, 'MD_10000402': 1265, 'Unknown_10001054': 1266, 'MD_10000650': 1267, 'FELLOW_10002342': 1268, 'Unknown_10001195': 1269, 'Unknown_10000283': 1270, 'NP PA_10000601': 1271, 'Unknown_10000963': 1272, 'Unknown_10001008': 1273, 'MD_10002361': 1274, 'Unknown_10000520': 1275, 'Unknown_10002513': 1276, 'MD_10000161': 1277, 'GENETIC COUNSELOR_10002748': 1278, 'INF RN_10000037': 1279, 'NP PA_10002557': 1280, 'Unknown_10003029': 1281, 'MD_10000603': 1282, 'NP PA_10000614': 1283, 'MD_10000557': 1284, 'MD_10000634': 1285, 'INF RN_10001926': 1286, 'MD_10000027': 1287, 'Unknown_10000657': 1288, 'Unknown_10000701': 1289, 'Unknown_10000339': 1290, 'Unknown_10000128': 1291, 'MD_10001718': 1292, 'NP PA_10000359': 1293, 'INF RN_10000033': 1294, 'Unknown_10000397': 1295, 'RESEARCH RN_10002038': 1296, 'Unknown_10000774': 1297, 'INF RN_10002771': 1298, 'Unknown_10000374': 1299, 'MD_10000400': 1300, 'NP PA_10000526': 1301, 'Unknown_10000343': 1302, 'MD_10000166': 1303, 'PROGRAM RN_10000632': 1304, 'IV NURSE_10002434': 1305, 'INF RN_10000867': 1306, 'MD_10001389': 1307, 'Unknown_10000844': 1308, 'MD_10000048': 1309, 'Unknown_10000092': 1310, 'Unknown_10000378': 1311, 'MD_10000734': 1312, 'MD_10000366': 1313, 'Unknown_10001659': 1314, 'Unknown_10000866': 1315, 'Unknown_10000573': 1316, 'Unknown_10000167': 1317, 'INF RN_10000823': 1318, 'Unknown_10001078': 1319, 'MD_10002431': 1320, 'Unknown_10001046': 1321, 'Unknown_10001918': 1322, 'MD_10001461': 1323, 'IV NURSE_10001379': 1324, 'FELLOW_10000908': 1325, 'Unknown_10001402': 1326, 'Unknown_10000565': 1327, 'Unknown_10000881': 1328, 'MD_10000303': 1329, 'MD_10000580': 1330, 'NP PA_10000517': 1331, 'Unknown_10000084': 1332, 'NP PA_10000244': 1333, 'Unknown_10001629': 1334, 'Unknown_10000989': 1335, 'PHARM TECH_10002533': 1336, 'Unknown_10002570': 1337, 'Unknown_10000416': 1338, 'NP PA_10001590': 1339, 'Unknown_10000528': 1340, 'INF RN_10000177': 1341, 'Unknown_10000682': 1342, 'Unknown_10000469': 1343, 'NP PA_10002273': 1344, 'Unknown_10001513': 1345, 'Unknown_10000310': 1346, 'Unknown_10000444': 1347, 'MD_10002091': 1348, 'Unknown_10001693': 1349, 'MD_10000340': 1350, 'Unknown_10001096': 1351, 'INTERPRETER_10001442': 1352, 'INF RN_10000804': 1353, 'Unknown_10002031': 1354, 'MD_10000738': 1355, 'Unknown_10000201': 1356, 'NP PA_10000322': 1357, 'Unknown_10000274': 1358, 'MD_10002241': 1359, 'Unknown_10002132': 1360, 'INF RN_10000071': 1361, 'Unknown_10000188': 1362, 'Unknown_10000240': 1363, 'Unknown_10002933': 1364, 'Unknown_10000427': 1365, 'GENETIC COUNSELOR_10002952': 1366, 'Unknown_10002603': 1367, 'Unknown_10000631': 1368, 'INF RN_10002433': 1369, 'Unknown_10000713': 1370, 'NP PA_10002829': 1371, 'Unknown_10002514': 1372, 'INF RN_10000789': 1373, 'MD_10003029': 1374, 'NP PA_10002559': 1375, 'Unknown_10000434': 1376, 'MD_10001529': 1377, 'RESEARCH RN_10002982': 1378, 'Unknown_10001403': 1379, 'MD_10001880': 1380, 'INF RN_10001771': 1381, 'GENETIC COUNSELOR_10002429': 1382, 'RESEARCH RN_10001659': 1383, 'MD_10000246': 1384, 'MD_10002870': 1385, 'Unknown_10001784': 1386, 'OTHER STAFF_10002582': 1387, 'NP PA_10000349': 1388, 'INF RN_10002592': 1389, 'MD_10000105': 1390, 'Unknown_10001880': 1391, 'Unknown_10002436': 1392, 'Unknown_10001607': 1393, 'Unknown_10001796': 1394, 'Unknown_10002123': 1395, 'Unknown_10001020': 1396, 'Unknown_10000177': 1397, 'MD_10001964': 1398, 'INF RN_10002323': 1399, 'Unknown_10000740': 1400, 'Unknown_10002265': 1401, 'Unknown_10001823': 1402, 'RESEARCH RN_10000958': 1403, 'FELLOW_10002872': 1404, 'Unknown_10001892': 1405, 'Unknown_10000166': 1406, 'INF RN_10002079': 1407, 'Unknown_10002519': 1408, 'Unknown_10000347': 1409, 'NP PA_10002540': 1410, 'Unknown_10000289': 1411, 'Unknown_10000185': 1412, 'INF RN_10002552': 1413, 'NP PA_10000313': 1414, 'NP PA_10000015': 1415, 'RESEARCH RN_10000038': 1416, 'INF RN_10000188': 1417, 'INF RN_10001784': 1418, 'PHLEBOTOMIST_10000068': 1419, 'MD_10002221': 1420, 'Unknown_10000015': 1421, 'Unknown_10001653': 1422, 'NP PA_10000879': 1423, 'SOCIAL WORKER_10001635': 1424, 'Unknown_10002219': 1425, 'INF RN_10000153': 1426, 'MD_10001507': 1427, 'INF RN_10002564': 1428, 'INF RN_10001691': 1429, 'NP PA_10000411': 1430, 'MD_10000281': 1431, 'PROGRAM RN_10001642': 1432, 'MD_10000477': 1433, 'INF RN_10002536': 1434, 'MD_10001065': 1435, 'Unknown_10000789': 1436, 'SOCIAL WORKER_10002096': 1437, 'Unknown_10000194': 1438, 'Unknown_10000345': 1439, 'RESEARCH RN_10002464': 1440, 'NP PA_10002071': 1441, 'Unknown_10003016': 1442, 'INF RN_10000502': 1443, 'Unknown_10000793': 1444, 'Unknown_10000734': 1445, 'Unknown_10000337': 1446, 'FELLOW_10001875': 1447, 'RESEARCH RN_10002377': 1448, 'INF RN_10001796': 1449, 'Unknown_10001405': 1450, 'INF RN_10000196': 1451, 'Unknown_10002201': 1452, 'INF RN_10000414': 1453, 'Unknown_10000314': 1454, 'MD_10002387': 1455, 'MD_10000468': 1456, 'INTERPRETER_10001084': 1457, 'INF RN_10000981': 1458, 'INF RN_10000275': 1459, 'INF RN_10002640': 1460, 'NP PA_10000936': 1461, 'Unknown_10000936': 1462, 'SOCIAL WORKER_10000721': 1463, 'Unknown_10000199': 1464, 'MD_10000708': 1465, 'Unknown_10000178': 1466, 'Unknown_10000396': 1467, 'Unknown_10002880': 1468, 'INF RN_10001915': 1469, 'Unknown_10000082': 1470, 'MD_10000104': 1471, 'Unknown_10001334': 1472, 'MD_10002997': 1473, 'Unknown_10000006': 1474, 'MD_10000583': 1475, 'RESEARCH RN_10000325': 1476, 'Unknown_10002559': 1477, 'INTERPRETER_10001086': 1478, 'INTERPRETER_10001405': 1479, 'GENETIC COUNSELOR_10000683': 1480, 'Unknown_10000229': 1481, 'Unknown_10001371': 1482, 'Unknown_10000451': 1483, 'MD_10000337': 1484, 'Unknown_10003002': 1485, 'RESEARCH RN_10000443': 1486, 'Unknown_10002226': 1487, 'Unknown_10000356': 1488, 'NP PA_10000162': 1489, 'MD_10000914': 1490, 'MD_10001759': 1491, 'INF RN_10002218': 1492, 'NP PA_10000164': 1493, 'Unknown_10001802': 1494, 'Unknown_10000840': 1495, 'Unknown_10003045': 1496, 'INF RN_10001607': 1497, 'Unknown_10001011': 1498, 'INTERPRETER_10000235': 1499, 'Unknown_10001919': 1500, 'Unknown_10002877': 1501, 'NP PA_10001376': 1502, 'Unknown_10000695': 1503, 'NP PA_10001368': 1504, 'Unknown_10002282': 1505, 'RESEARCH RN_10001589': 1506, 'PROGRAM RN_10002318': 1507, 'Unknown_10001519': 1508, 'NP PA_10000440': 1509, 'MD_10001318': 1510, 'NP PA_10000854': 1511, 'OTHER STAFF_10000528': 1512, 'Unknown_10001840': 1513, 'SOCIAL WORKER_10002229': 1514, 'INF RN_10002128': 1515, 'GENETIC COUNSELOR_10002911': 1516, 'INF RN_10000006': 1517, 'Unknown_10001813': 1518, 'Unknown_10000480': 1519, 'Unknown_10000854': 1520, 'MD_10000297': 1521, 'Unknown_10000831': 1522, 'INF RN_10002822': 1523, 'RESEARCH RN_10000890': 1524, 'MD_10000073': 1525, 'INF RN_10002981': 1526, 'Unknown_10000598': 1527, 'MD_10000472': 1528, 'MD_10000245': 1529, 'INTERPRETER_10001402': 1530, 'Unknown_10001719': 1531, 'Unknown_10000402': 1532, 'MD_10000103': 1533, 'Unknown_10000564': 1534, 'NP PA_10002936': 1535, 'Unknown_10001084': 1536, 'Unknown_10001077': 1537, 'RESEARCH RN_10002513': 1538, 'Unknown_10001616': 1539, 'RESEARCH RN_10002288': 1540, 'MD_10000522': 1541, 'Unknown_10001522': 1542, 'SOCIAL WORKER_10000556': 1543, 'Unknown_10000603': 1544, 'INF RN_10000416': 1545, 'NP PA_10002083': 1546, 'Unknown_10001940': 1547, 'MD_10000944': 1548, 'INF RN_10000792': 1549, 'Unknown_10001826': 1550, 'GENETIC COUNSELOR_10002130': 1551, 'Unknown_10002564': 1552, 'INF RN_10002933': 1553, 'MD_10000541': 1554, 'Unknown_10000618': 1555, 'MD_10003018': 1556, 'Unknown_10002431': 1557, 'Unknown_10002962': 1558, 'INF RN_10002123': 1559, 'Unknown_10000660': 1560, 'FELLOW_10002349': 1561, 'NP PA_10002543': 1562, 'NP PA_10001845': 1563, 'NP PA_10000357': 1564, 'Unknown_10001320': 1565, 'GENETIC COUNSELOR_10001501': 1566, 'Unknown_10000151': 1567, 'Unknown_10002585': 1568, 'INF RN_10001059': 1569, 'INF RN_10002449': 1570, 'NP PA_10001544': 1571, 'Unknown_10000428': 1572, 'Unknown_10000823': 1573, 'Unknown_10000375': 1574, 'MD_10000201': 1575, 'INF RN_10001005': 1576, 'Unknown_10001915': 1577, 'INF RN_10001379': 1578, 'INF RN_10002190': 1579, 'MD_10002583': 1580, 'NP PA_10000323': 1581, 'Unknown_10000931': 1582, 'MD_10000662': 1583, 'INF RN_10001823': 1584, 'INF RN_10002886': 1585, 'UNKNOWN': 0}
class Token(object):

    def __init__(self, id: int, params: Parameters, process: SimulationProcess, prefix: Prefix, writer: csv.writer):
        self._id = id
        self._process = process
        #self._start_time = params.START_SIMULATION
        self._pos = 0 ## number of operation that is running
        self._params = params
        self._operations = self._params.JOBS[self._id]["machine_seq"] ## list of operations to perform
        self._times_operations = self._params.JOBS[self._id]["times"]
        self._times_fixed = self._params.JOBS_FIXED[self._id]["times_fixed"] if self._params.JOBS_FIXED else None
        self._prefix = prefix
        self._prefix_lstm = []
        self._writer = writer
        #self._parallel_object = parallel_object
        self._buffer = Buffer(writer, None)
        self._DEP = False
        self._activity_seq = self._params.JOBS[self._id]["activity_seq"] if "activity_seq" in self._params.JOBS[self._id] else None
        #self._buffer.set_feature("attribute_case", custom.case_function_attribute(self._id, time))

    def next_transition_jsp(self):
        next = None
        if self._pos < len(self._operations):
            next = self._operations[self._pos]
        return next


    def simulation(self, env: simpy.Environment):
        """
            The main function to handle the simulation of a single trace
        """
        trans = self.next_transition_jsp()
        ### register trace in process ###
        request_resource = None
        #resource_trace = self._process._get_resource_trace()
        #resource_trace_request = resource_trace.request() #if self._type == 'sequential' else None

        while trans is not None:

            self._buffer.reset()
            self._buffer.set_feature("id_job", self._id)
            ### register event in process ###
            #resource_task = self._process._get_resource_event(self._activity_seq[self._pos][0])
            #self._buffer.set_feature("wip_activity", resource_task.count)
            resource = self._process._get_resource(trans)
            queue = 0 if len(resource._queue) == 0 else len(resource._queue[-1])
            self._buffer.set_feature("queue", queue)
            self._buffer.set_feature("enabled_time", env.now)

            if resource._schedule_active:
                request_resource = resource.request(self._id)
                yield request_resource.get(1)
            else:
                request_resource = resource.request_no_schedule()
                yield request_resource

            #single_resource = self._process._set_single_resource(resource._get_name())
            if self._DEP:
                self._buffer.set_feature("activity", self._activity_seq[self._pos][0])
            else:
                self._buffer.set_feature("activity", str(self._id) + '_' + str(trans))
            if self._params.N_TO_MACHINES:
                self._buffer.set_feature("resource", self._params.N_TO_MACHINES[str(trans)])

            #resource_task_request = resource_task.request()
            #yield resource_task_request

            ### call predictor for processing time
            #self._buffer.set_feature("wip_start", resource_trace.count)
            #self._buffer.set_feature("ro_single", self._process.get_occupations_single_role(resource._get_name()))
            #self._buffer.set_feature("ro_total", self._process.get_occupations_all_role())
            #self._buffer.set_feature("wip_activity", resource_task.count)

            #stop = resource.to_time_schedule(self._start_time + timedelta(seconds=env.now))
            #yield env.timeout(stop)
            if self._DEP:
                name_machine = self._params.N_TO_MACHINES[str(trans)]
                time = self._params.START + timedelta(seconds=env.now)
                res = RES_TO_N[name_machine] if name_machine in RES_TO_N else 'UNKNOWN'
                self._prefix_lstm.append([self._id, self._activity_seq[self._pos][0], res, time.month, time.weekday(), time.hour])
                duration = self.predict_my_regressor()

            else:
                duration = self.define_processing_time_jsp(trans)


            if self._params.CALENDARS:
                waiting_time = self._process.get_waiting_time_calendar(trans, env.now, duration)
                yield env.timeout(waiting_time)

            self._buffer.set_feature("start_time", env.now)

            yield env.timeout(duration)

            #self._buffer.set_feature("wip_end", resource_trace.count)
            self._buffer.set_feature("end_time", env.now)
            self._buffer.print_values()
            if self._activity_seq:
                self._prefix.add_activity(self._activity_seq[self._pos][0])

            if resource._schedule_active:
                env.process(resource._release())
            else:
                resource._release_no_schedule(request_resource)


            self._pos += 1
            trans = self.next_transition_jsp()

        #print("Complete project", self._id)


    def predict_my_regressor(self):
        # prefix = [[1, 7, 10, 2, 5, 12], [1, 176, 20, 2, 5, 13], [1, 179, 10, 2, 5, 14]]
        # [e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, month, day, hour, act, res]
        # [7, 176, 0, 0, 0, 0, 0, 0, 0, 0, 10, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 2]
        prefix_e = []
        prefix_r = []
        for idx, row in enumerate(self._prefix_lstm[:-1]):
         prefix_e.append(row[1])
         prefix_r.append(row[2])

        prefix_r = [RES_TO_N[e] if e == 'UNKNOWN' else e for e in prefix_e]
        prefix_e = prefix_e + [0] * (11 - len(prefix_e))
        prefix_r = prefix_r + [0] * (11 - len(prefix_r))
        res = [0 if self._prefix_lstm[-1][2] == 'UNKNOWN' else self._prefix_lstm[-1][2]]
        input_f = prefix_e + prefix_r + [self._prefix_lstm[-1][3]] + [self._prefix_lstm[-1][4]] + [self._prefix_lstm[-1][5]] + [
        self._prefix_lstm[-1][1]] + res

        array = np.array(input_f)
        array_reshaped = array.reshape(1, -1)
        y_pred_single = self._process.loaded_model_reg.predict(array_reshaped)
        predicted_mu = y_pred_single[0, 0]
        predicted_sigma = y_pred_single[0, 1]
        proc = np.random.normal(predicted_mu, math.sqrt(predicted_sigma), 1)[0]
        self._process.set_simulation_parameters(self._id, self._pos, predicted_mu, math.sqrt(predicted_sigma))
        #print(predicted_mu, predicted_sigma)
        return max(0, proc)


    def define_processing_time_jsp(self, operation):
        operation = len(self._prefix.get_prefix())
        mu = self._times_operations[operation][0]
        sigma = self._times_operations[operation][1]
        a = (0 - mu) / sigma if sigma > 0 else 0
        b = (math.inf - mu) / sigma if sigma > 0 else (math.inf - mu)
        duration = truncnorm.rvs(a, b, self._times_operations[operation][0], self._times_operations[operation][1], size=1)[0]
        self._buffer.set_feature("wip_start", sigma)
        return duration

    def _get_resource_role(self, activity):
        elements = self._params.ROLE_ACTIVITY[activity.label]
        resource_object = []
        for e in elements:
            resource_object.append(self._process._get_resource(e))
        return resource_object

    def _update_marking(self, trans):
        self._am = semantics.execute(trans, self._net, self._am)

    def _delete_tokens(self, name):
        to_delete = []
        for p in self._am:
            if p.name != name:
                to_delete.append(p)
        return to_delete

    def _check_probability(self, prob):
        """Check if the sum of probabilities is 1
        """
        if sum(prob) != 1:
            print('WARNING: The sum of the probabilities associated with the paths is not 1, to run the simulation we define equal probability')
            return False
        else:
            return True

    def _check_type_paths(self, prob):
        if type(prob[0]) is str:
            if sum([x == prob[0] for x in prob]) != len(prob):
                raise ValueError('ERROR: Not all path are defined as same type ', prob)
        elif type(prob[0]) is float:
            if sum([isinstance(x, float) for x in prob]) != len(prob):
                raise ValueError('ERROR: Not all path are defined as same type (float number) ', prob)
        else:
            raise ValueError("ERROR: Invalid input, specify the probability as AUTO, float number or CUSTOM ", prob)

    def _retrieve_check_paths(self, all_enabled_trans):
        prob = []
        for trans in all_enabled_trans:
            try:
                if trans.label:
                    prob.append(self._params.PROBABILITY[trans.label])
                else:
                    prob.append(self._params.PROBABILITY[trans.name])
            except:
                print('ERROR: Not all path probabilities are defined. Define all paths: ', all_enabled_trans)

        return prob

    def define_xor_next_activity(self, all_enabled_trans):
        """ Three different methods to decide which path following from XOR gateway:
        * Random choice: each path has equal probability to be chosen (AUTO)
        ```json
        "probability": {
            "A_ACCEPTED": "AUTO",
            "skip_2": "AUTO",
            "A_FINALIZED": "AUTO",
        }
        ```
        * Defined probability: in the file json it is possible to define for each path a specific probability (PROBABILITY as value)
        ```json
        "probability": {
            "A_PREACCEPTED": 0.20,
            "skip_1": 0.80
        }
        ```
        * Custom method: it is possible to define a dedicate method that given the possible paths it returns the one to
        follow, using whatever techniques the user prefers. (CUSTOM)
        ```json
        "probability": {
            "A_CANCELLED": "CUSTOM",
            "A_DECLINED": "CUSTOM",
            "tauSplit_5": "CUSTOM"
        }
        ```
        """
        prob = ['AUTO'] if not self._params.PROBABILITY else self._retrieve_check_paths(all_enabled_trans)
        self._check_type_paths(prob)
        if prob[0] == 'AUTO':
                next = random.choices(list(range(0, len(all_enabled_trans), 1)))[0]
        elif prob[0] == 'CUSTOM':
            next = self.call_custom_xor_function(all_enabled_trans)
        elif type(prob[0] == float()):
            if self._check_probability(prob):
                value = [*range(0, len(prob), 1)]
                next = int(random.choices(value, prob)[0])
            else:
                next = random.choices(list(range(0, len(all_enabled_trans), 1)))[0]

        return all_enabled_trans[next]

    def define_processing_time(self, activity):
        """ Three different methods are available to define the processing time for each activity:
            * Distribution function: specify in the json file the distribution with the right parameters for each
            activity, see the [numpy_distribution](https://numpy.org/doc/stable/reference/random/generator.html) distribution, (DISTRIBUTION).
            **Be careful**: A negative value generated by the distribution is not valid for the simulator.
            ```json
             "processing_time": {
                 "A_FINALIZED": { "name": "uniform", "parameters": { "low": 3600, "high": 7200}},
             }
            ```
            * Custom method: it is possible to define a dedicated method that, given the activity and its
            characteristics, returns the duration of processing time required. (CUSTOM)
            ```json
            "processing_time": {
                 "A_FINALIZED":  { "name": "custom"}
            }
            ```
            * Mixed: It is possible to define a distribution function for some activities and a dedicated method for the others.
            ```json
            "processing_time": {
                 "A_FINALIZED":  { "name": "custom"},
                 "A_REGISTERED":  { "name": "uniform", "parameters": { "low": 3600, "high": 7200}}
            }
            ```
        """
        try:
            if self._params.PROCESSING_TIME[activity]["name"] == 'custom':
                duration = self.call_custom_processing_time()
            else:
                distribution = self._params.PROCESSING_TIME[activity]['name']
                parameters = self._params.PROCESSING_TIME[activity]['parameters']
                duration = getattr(np.random, distribution)(**parameters, size=1)[0]
                if duration < 0:
                    print("WARNING: Negative processing time",  duration)
                    duration = 0
        except:
            raise ValueError("ERROR: The processing time of", activity, "is not defined in json file")
        return duration

    def define_waiting_time(self, next_act):
        """ Three different methods are available to define the waiting time before each activity:
            * Distribution function: specify in the json file the distribution with the right parameters for each
            activity, see the [numpy_distribution](https://numpy.org/doc/stable/reference/random/generator.html) distribution, (DISTRIBUTION).
            **Be careful**: A negative value generated by the distribution is not valid for the simulator.
            ```json
             "waiting_time": {
                 "A_PARTLYSUBMITTED":  { "name": "uniform", "parameters": { "low": 3600, "high": 7200}}
             }
            ```
            * Custom method: it is possible to define a dedicated method that, given the next activity with its
            features, returns the duration of waiting time. (CUSTOM)
            ```json
            "waiting_time": {
                 "A_PARTLYSUBMITTED": { "name": "custom"}
            }
            ```
            * Mixed: As the processing time, it is possible to define a mix of methods for each activity.
            ```json
            "waiting_time": {
                 "A_PARTLYSUBMITTED":  { "name": "custom"},
                 "A_APPROVED":  { "name": "uniform", "parameters": { "low": 3600, "high": 7200}}
            }
            ```
        """
        try:
            if self._params.WAITING_TIME[next_act]["name"] == 'custom':
                duration = self.call_custom_waiting_time()
            else:
                distribution = self._params.WAITING_TIME[next_act]['name']
                parameters = self._params.WAITING_TIME[next_act]['parameters']
                duration = getattr(np.random, distribution)(**parameters, size=1)[0]
                if duration < 0:
                    print("WARNING: Negative waiting time",  duration)
                    duration = 0
        except:
            duration = 0

        return duration

    def call_custom_processing_time(self):
        """
        Call to the custom functions in the file *custom_function.py*.
        """
        return custom.custom_processing_time(self._buffer)

    def call_custom_waiting_time(self):
        """
            Call to the custom functions in the file *custom_function.py*.
        """
        return custom.custom_waiting_time(self._buffer)

    def call_custom_xor_function(self, all_enabled_trans):
        """
            Call to the custom functions in the file *custom_function.py*.
        """
        return custom.custom_decision_mining(self._buffer)

    def next_transition(self, env):
        """
        Method to define the next activity in the petrinet.
        """
        all_enabled_trans = semantics.enabled_transitions(self._net, self._am)
        all_enabled_trans = list(all_enabled_trans)
        all_enabled_trans.sort(key=lambda x: x.name)
        if len(all_enabled_trans) == 0:
            return None
        elif len(all_enabled_trans) == 1:
            return all_enabled_trans[0]
        else:
            if len(self._am) == 1:
                return self.define_xor_next_activity(all_enabled_trans)
            else:
                events = []
                for token in self._am:
                    name = token.name
                    new_am = copy.copy(self._am)
                    tokens_to_delete = self._delete_tokens(name)
                    for p in tokens_to_delete:
                        del new_am[p]
                    path = env.process(Token(self._id, self._net, new_am, self._params, self._process, self._prefix, "parallel", self._writer, self._parallel_object, self._buffer._get_dictionary()).simulation(env))
                    events.append(path)
                return events

    def _delete_places(self, places):
        delete = []
        for place in places:
            for p in self._net.places:
                if str(place) in str(p.name):
                    delete.append(p)
        return delete